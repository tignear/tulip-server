# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddImageInput {
  title: String!
  file: String!
  outhers: [ID!]!
  description: String!
  tags: [ID!]!
}

input AddOutherInput {
  userId: ID!
  nickname: String!
}

input AddUserInput {
  name: String!
  password: String!
}

interface Connection {
  pageInfo: PageInfo!
  edges: [Edge!]!
}

interface Edge {
  cursor: String!
  node: Node!
}

type Image implements Node {
  id: ID!
  title: String!
  file: String!
  outhers: OutherConnection!
  description: String!
  tags: TagConnection!
  updateAt: Int!
}

type ImageConnection implements Connection {
  pageInfo: PageInfo!
  edges: [ImageEdge!]!
  totalCount: Int!
}

type ImageEdge implements Edge {
  cursor: String!
  node: Image!
}

input ImagesFilter {
  title: String
  outhers: ID
  description: String
  tags: [ID!]
}

input ImagesInput {
  first: Int
  after: String
  last: Int
  before: String
  orderBy: ImagesOrder
  term: String
  filter: ImagesFilter
}

enum ImagesOrder {
  Title
}

type Mutation {
  addImage(input: AddImageInput!): Image!
  updateImage(input: UpdateImageInput!): Image!
  addOuther(input: AddOutherInput!): Outher!
  updateOuther(input: UpdateOutherInput!): Outher!
  addUser(input: AddUserInput!): User!
  updateUser(input: UpdateUserInput!): User!
  remove(id: ID!): Node!
}

interface Node {
  id: ID!
}

type Outher implements Node {
  id: ID!
  nickname: String!
  images: ImageConnection!
  user: User!
}

type OutherConnection implements Connection {
  pageInfo: PageInfo!
  edges: [OutherEdge!]!
  totalCount: Int
}

type OutherEdge implements Edge {
  cursor: String!
  node: Outher!
}

input OuthersInput {
  first: Int
  after: String
  last: Int
  before: String
  orderBy: OuthersOrder
  term: String
}

enum OuthersOrder {
  Id
  Nickname
}

type PageInfo {
  startCursor: String!
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Query {
  images(input: ImagesInput!): ImageConnection!
  outhers(input: OuthersInput!): OutherConnection!
  users(input: UsersInput!): UserConnection!
  node(id: ID!): Node!
}

type Tag implements Node {
  id: ID!
  name: String!
  images: ImageConnection!
}

type TagConnection implements Connection {
  pageInfo: PageInfo!
  edges: [TagEdge!]!
  totalCount: Int!
}

type TagEdge implements Edge {
  cursor: String!
  node: Tag!
}

input UpdateImageInput {
  title: String!
  file: String!
  outhers: [ID!]!
  description: String!
  tags: [ID!]!
}

input UpdateOutherInput {
  id: ID!
  nickname: String
}

input UpdateUserInput {
  id: ID!
  name: String
}

type User implements Node {
  id: ID!
  name: String!
  outhers(input: OuthersInput!): OutherConnection
}

type UserConnection implements Connection {
  pageInfo: PageInfo!
  edges: [UserEdge!]!
  totalCount: Int
}

type UserEdge implements Edge {
  cursor: String!
  node: User!
}

input UsersFilter {
  name: String
  id: ID
}

input UsersInput {
  first: Int
  after: String
  last: Int
  before: String
  orderBy: UsersOrder
  term: String
  filter: UsersFilter
  outhes: OuthersInput
}

enum UsersOrder {
  Id
  Name
}
