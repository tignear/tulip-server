# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddImageInput {
  title: String!
  file: String!
  outhers: [ID!]!
  description: String!
  tags: [ID!]!
}

input AddOutherInput {
  userId: ID!
  nickname: String!
}

input AddUserInput {
  name: String!
  password: String!
}

input AuthorizationInput {
  userId: ID!
  password: String!
  scope: [ScopeType!]!
  redirectUri: String!
  responseType: [AuthorizationResponseType!]!
  clientId: String!
  state: String

  """reply attack protection."""
  nonce: String
  maxAge: Int
}

union AuthorizationResponse = CodeFlowAuthorizationResponse | ImplicitFlowAuthorizationResponse | HybridFlowAuthorizationResponse

enum AuthorizationResponseType {
  Code
  Token
  IdToken
}

type CodeFlowAuthorizationResponse {
  code: String!
  state: String
}

interface Connection {
  pageInfo: PageInfo!
  edges: [Edge!]!
}

interface Edge {
  cursor: String!
  node: Node!
}

enum GrantType {
  AuthorizationCode
  RefreshToken
}

type HybridFlowAuthorizationResponse {
  code: String!
  accessToken: String
  tokenType: TokenType!
  idToken: String
  expiresIn: Int
  state: String!
}

type Image implements Node {
  id: ID!
  title: String!
  file: String!
  outhers: OutherConnection!
  description: String!
  tags: TagConnection!
  updateAt: Int!
}

type ImageConnection implements Connection {
  pageInfo: PageInfo!
  edges: [ImageEdge!]!
  totalCount: Int!
}

type ImageEdge implements Edge {
  cursor: String!
  node: Image!
}

input ImagesFilter {
  title: String
  outhers: ID
  description: String
  tags: [ID!]
}

input ImagesInput {
  first: Int
  after: String
  last: Int
  before: String
  orderBy: ImagesOrder
  term: String
  filter: ImagesFilter
}

enum ImagesOrder {
  Title
}

type ImplicitFlowAuthorizationResponse {
  accessToken: String
  tokenType: TokenType!
  idToken: String
  expiresIn: Int
  state: String!
}

type LoginInput {
  userId: ID!
  password: String!
}

type Mutation {
  addImage(input: AddImageInput!): Image!
  updateImage(input: UpdateImageInput!): Image!
  addOuther(input: AddOutherInput!): Outher!
  updateOuther(input: UpdateOutherInput!): Outher!
  addUser(input: AddUserInput!): User!
  updateUser(input: UpdateUserInput!): User!
  remove(id: ID!): Node!

  """only call our web app"""
  authorization(input: AuthorizationInput!): AuthorizationResponse!
  token(input: TokenInput!): TokenResponse!
  registerRelyingParty(input: RegisterRelyingPartyInput!): RelyingParty!
}

interface Node {
  id: ID!
}

type Outher implements Node {
  id: ID!
  nickname: String!
  images: ImageConnection!
  user: User!
}

type OutherConnection implements Connection {
  pageInfo: PageInfo!
  edges: [OutherEdge!]!
  totalCount: Int
}

type OutherEdge implements Edge {
  cursor: String!
  node: Outher!
}

input OuthersInput {
  first: Int
  after: String
  last: Int
  before: String
  orderBy: OuthersOrder
  term: String
}

enum OuthersOrder {
  Id
  Nickname
}

type PageInfo {
  startCursor: String!
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Query {
  images(input: ImagesInput!): ImageConnection!
  outhers(input: OuthersInput!): OutherConnection!
  users(input: UsersInput!): UserConnection!
  node(id: ID!): Node!
}

input RegisterRelyingPartyInput {
  redirectUris: [String!]!
  tokeEndpointAuthMethod: String!
  grantTypes: [GrantType!]!
  responseTypes: [AuthorizationResponseType!]!
  clientName: String!
  clientUri: String
  logoUri: String
  scopes: [ScopeType!]!
  contacts: [String!]
  tosUri: String
  policyUri: String
}

type RelyingParty implements Node {
  id: ID!
  redirectUris: [String!]!
  tokenEndpointAuthMethod: String!
  grantTypes: [GrantType!]!
  responseTypes: [AuthorizationResponseType!]!
  clientName: String!
  clientUri: String
  logoUri: String
  scopes: [ScopeType!]!
  contacts: [String!]!
  tosUri: String
  policyUri: String
}

enum ScopeType {
  OpenId
  ManageAccount
}

type Tag implements Node {
  id: ID!
  name: String!
  images: ImageConnection!
}

type TagConnection implements Connection {
  pageInfo: PageInfo!
  edges: [TagEdge!]!
  totalCount: Int!
}

type TagEdge implements Edge {
  cursor: String!
  node: Tag!
}

input TokenInput {
  grantType: GrantType!
  code: String
  redirectUri: String
  clientId: String
  refreshToken: String
}

type TokenResponse {
  accessToken: String!
  tokenType: Float!
  expiresIn: Float!
  scopes: [ScopeType!]!
  refreshToken: String!
  idToken: String
}

enum TokenType {
  Bearer
}

input UpdateImageInput {
  title: String!
  file: String!
  outhers: [ID!]!
  description: String!
  tags: [ID!]!
}

input UpdateOutherInput {
  id: ID!
  nickname: String
}

input UpdateUserInput {
  id: ID!
  name: String
}

type User implements Node {
  id: ID!
  name: String!
  outhers(input: OuthersInput!): OutherConnection
}

type UserConnection implements Connection {
  pageInfo: PageInfo!
  edges: [UserEdge!]!
  totalCount: Int
}

type UserEdge implements Edge {
  cursor: String!
  node: User!
}

input UsersFilter {
  name: String
  id: ID
}

input UsersInput {
  first: Int
  after: String
  last: Int
  before: String
  orderBy: UsersOrder
  term: String
  filter: UsersFilter
  outhes: OuthersInput
}

enum UsersOrder {
  Id
  Name
}
