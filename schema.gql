# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddUserInput {
  name: String!
  password: String!
}

input AuthorizationInput {
  clientId: String!
  maxAge: Int

  """reply attack protection."""
  nonce: String
  redirectUri: String!
  responseType: [AuthorizationResponseType!]!
  scope: [ScopeType!]!
  state: String
}

union AuthorizationResponse = CodeFlowAuthorizationResponse | HybridFlowAuthorizationResponse | ImplicitFlowAuthorizationResponse

enum AuthorizationResponseType {
  Code
  IdToken
  Token
}

type CodeFlowAuthorizationResponse {
  code: String!
  scope: [ScopeType!]!
  state: String
}

interface Connection {
  edges: [Edge!]!
  pageInfo: PageInfo!
}

interface Edge {
  cursor: String!
  node: Node!
}

enum GrantType {
  AuthorizationCode
  RefreshToken
}

type HybridFlowAuthorizationResponse {
  accessToken: String
  code: String!
  expiresIn: Int
  idToken: String
  state: String!
  tokenType: TokenType!
}

type ImplicitFlowAuthorizationResponse {
  accessToken: String
  expiresIn: Int
  idToken: String
  state: String!
  tokenType: TokenType!
}

type Mutation {
  addUser(input: AddUserInput!): User!

  """only call our web app"""
  authorization(input: AuthorizationInput!): AuthorizationResponse!
  registerRelyingParty(input: RegisterRelyingPartyInput!): RelyingParty!
  remove(id: ID!): Node!
  token(input: TokenInput!): TokenResponse!
  updateUser(input: UpdateUserInput!): User!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

type Query {
  node(id: ID!): Node!
  users(input: UsersInput!): UserConnection!
}

input RegisterRelyingPartyInput {
  clientName: String!
  clientUri: String
  contacts: [String!]
  grantTypes: [GrantType!]!
  logoUri: String
  policyUri: String
  redirectUris: [String!]!
  responseTypes: [AuthorizationResponseType!]!
  scopes: [ScopeType!]!
  tokenEndpointAuthMethod: String!
  tosUri: String
}

type RelyingParty implements Node {
  clientName: String!
  clientUri: String
  contacts: [String!]!
  grantTypes: [GrantType!]!
  id: ID!
  logoUri: String
  policyUri: String
  redirectUris: [String!]!
  responseTypes: [AuthorizationResponseType!]!
  scopes: [ScopeType!]!
  tokenEndpointAuthMethod: String!
  tosUri: String
}

enum ScopeType {
  ManageAccount
  OpenId
}

input TokenInput {
  clientId: String
  code: String
  grantType: GrantType!
  redirectUri: String
  refreshToken: String
}

type TokenResponse {
  accessToken: String!
  expiresIn: Float!
  idToken: String
  refreshToken: String!
  scopes: [ScopeType!]!
  tokenType: Float!
}

enum TokenType {
  Bearer
}

input UpdateUserInput {
  id: ID!
  name: String
}

type User implements Node {
  id: ID!
  name: String!
  userGrant(input: UserGrantInput): [UserGrant!]
}

type UserConnection implements Connection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Int
}

type UserEdge implements Edge {
  cursor: String!
  node: User!
}

type UserGrant implements Node {
  id: ID!
  rp: RelyingParty!
  scope: [ScopeType!]
  user: User!
}

input UserGrantInput {
  rpId: ID
}

input UsersFilter {
  id: ID
  name: String
}

input UsersInput {
  after: String
  before: String
  filter: UsersFilter
  first: Int
  last: Int
  orderBy: UsersOrder
  term: String
}

enum UsersOrder {
  Id
  Name
}
